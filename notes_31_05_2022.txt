 package com.infosys.educator.practice1;

  public class Practice1Application implements CommandLineRunner {}
  


 package com.infosys.educator.practice1.controller;
 package com.infosys.educator.practice1.service;
 package com.infosys.educator.practice1.repository;
 package com.infosys.educator.practice1.exception;
 //package com.infosys.educator.practice1.dto;
 package com.infosys.educator.practice1.validator;

 Write a springboot application to check whether the entered string is available in a collection List.
 If not raise an exception StringNotFoundException.
 In validation we have to check the entered string for search has all the characters as alphabets.

  package com.infosys.educator.practice1.repository;
  public interface StringRepository{
       boolean searchString(String str);
     }

  package com.infosys.educator.practice1.repository;

  @Repository  
  public class StringRepositoryImpl implements StringRepository {

   List<String> stringList=new ArrayList<>();   
   public StringRepositoryImpl(){
     stringList.add("hello");
     stringList.add("hi");
     stringList.add("bye");

   }

    public boolean searchString(String str) {
                        boolean b=stringList.contains(str);
     }


  }

--------------------------------------------------------------------------------------------------


 package com.infosys.educator.practice1.service;
  public interface StringService{
       boolean searchString(String str);
     }

  package com.infosys.educator.practice1.service;

  @Service 
  public class StringServiceImpl implements StringService {

     @Autowired
     private StringRepository stringRepository;

    public boolean searchString(String str) {

     }


  }

-------------------------------------------------------------------------------

   package com.infosys.educator.practice1.controller;

  @Controller
  public class StringController {

     @Autowired
     private StringService stringService;

    public boolean searchString(String str) {

     }

  }


   package com.infosys.educator.practice1.validator;

   public class Validator {
   
      public static boolean validate(String str){

       } 

    }
------------------------------------------------------------------------------------------------------------

package com.infosys.educator.practice1.exception; 

   public class StringNotValidException extends Exception {


   }
----------------------------------------------------------------------------------------------------------

/* package com.infosys.educator.practice1.dto;

   public class StringDTO{
    private String string;
   // setters/getters;
   } */
 ---------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------

Problem Statement

ABC Solutions provides online business consulting and outsourcing services. They want to automate the project allocation process. The application has following two modules:

Add new projects

Generate report of each project

You have to develop the service layer of this application. Follow the following instructions before starting coding:



This project is partially implemented. You have to implement the DTO classes, validator class and service class.

The description of different classes is given as follows:

1. DTO Classes

ProjectDTO (already implemented)
TeamMemberDTO (already implemented)




2. Validator class (to be implemented)
This class is used for validating the input values. Implement it using class diagram and description given below:

Note : The methods are static.

Method description

validate(TeamMemberDTO teamMember) : void

This method will receive a TeamMemberDTO object. It should call the respective validator methods (described below) to validate the team member data and in case of failed validation, throw exceptions with the corresponding messages as shown in the table below:

Violation For

Message

employeeId
Validator.INVALID_EMPLOYEEID

 

validateEmployeeId(Integer employeeId) : boolean

The method validates employeeId.

The employeeId should be a six digit positive number.
If the above condition is satisfied, return true, otherwise return false. 

3. ProjectServiceImpl class (to be implemented)

Mark it with appropriate stereotype annotation with value as "projectService".

Instance variable description

repository should be injected using autowiring.

Method description
addProject(ProjectDTO project)

This method receives a ProjectDTO object, validates it and send to Repository to be added to database.
This method invokes validate() of Validator class to validate the employeeId of each employee.
If all the details are valid, it should invoke addProject() of ProjectRepository, which in turn returns an integer value.It returns the value received in previous step.

getProjectDetails(String technology)
This method return a list of all projects that belong to the received technology.
It should invoke the getProjectDetails() of ProjectRepository which returns a list of Project object.

Filter the list obtained in previous step to get a list of only those projects whose technology is same as the technology received by this method.

Create and populate a new List<ProjectDTO> using the filtered list, obtained in previous step.

If the filtered list is empty, then throw AbcException with message “Service.PROJECTS_NOT_FOUND”, else return the List<ProjectDTO> obtained in previous step.

4. ProjectRepositoryImpl class
This is the Repository class of this application and is already implemented.



Method description

addProject(ProjectDTO project)
This method is used to save the project details in database.

List<ProjectDTO> getProjectDetails()

The method return details of all the projects.

5. AbcToTraineeApplication

This class is used to run your Spring Boot application. Implement it using class diagram and description given below:



Note : The success and error messages should be logged using properties file.

Instance Variable Description

Inject the projectService using autowiring.
Inject the environment using autowiring.

Method description
1. addProject()
Invoke addProject() method of ProjectServiceImpl class, which returns an integer for valid data or throws an exception for invalid data.
The success message should be logged using property as "UserInterface.PROJECT_ADDED_SUCCESS".

For following valid values for project details :

projectName: FSADM8
cost: 200000
teamSize: 5
technologyUsed: Java

 

   memberList

employeeId: 722009
employeeName: Robin
designation: SSC
skills: Java , Oracle

employeeId: 722019
employeeName: Monica
designation: SSC
skills: Java, Python

The output should be logged in console as:



For invalid employeeId: 7220, output should be logged in console as:



 

2. getProjectDetails()

Invoke getProjectDetails() method of ProjectServiceImpl class.
For valid technology: “Java”, output should be logged in console as:
For invalid technology: “Angular”, output should be logged in console as:

----------------------------------------------------------------------------------------------------------

The steps:-
1) create a maven project ( Spring Starter project).
2) Go for selection the dependencies
   * mysql driver
   * spring jpa
3) creating different packages.
   * for entity
   * for dto
   * for service
   * for repo
   * for exception
   * for validation
-----------------------------------------
4) creating the database and the table
   CREATE database studentDB;
   use studentDB;
   CREATE table studentdetails(
    roll INTEGER PRIMARY KEY,
    name VARCHAR(20),
    marks INTEGER
   );
  
    INSERT INTO studentdetails VALUES(1,'Ram',60);
    commit;
   SELECT * FROM studentdetails;
-----------------------------------------------------------------------------------------------------------
5) Create the entity class.

package com.infosys.demo.entity;



import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="studentdetails")

public class Student{



@Id
 private int roll;
 private String name;
 private String marks;
// setters/getters
public int getRoll() {
	return roll;
}
public void setRoll(int roll) {
	this.roll = roll;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getMarks() {
	return marks;
}
public void setMarks(String marks) {
	this.marks = marks;
}
@Override
	public int hashCode() {
		return Objects.hash(marks, name, roll);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Student other = (Student) obj;
		return Objects.equals(marks, other.marks) && Objects.equals(name, other.name) && roll == other.roll;
	}

@Override
public String toString() {
	return "Student [roll=" + roll + ", name=" + name + ", marks=" + marks + "]";
}


}

6) Create the DTO class.


package com.infosys.demo.dto;
   public class StudentDTO{
    private int roll;
   private String name;
   private String marks;
   // setters/getters
   }


7) Create Exception class.

  package com.infosys.demo.exception;
  public class RecordNotFoundException extends Exception {
     
       public RecordNotFoundException(String message){
            super(message);
         }

   }
 

8) Create the service interface and class
     package com.infosys.demo.service;
    public interface StudentService {
      StudentDTO  getStudent(int roll) throws RecordNotFoundException;

    }


    package com.infosys.demo.service;
   @Service 
   public class StudentServiceImpl implements StudentService {
     
     @Autowired     
     private StudentRepository studentRepository;

     public StudentDTO  getStudent(int roll) throws RecordNotFoundException{
     StudentDTO studentDTO=studentRepository.getStudent(roll);
         if(studentDTO==null){
             throw new RecordNotFoundException("Service.isRollFound");
           }
        return studentDTO;     
      } 
  }


9) Create the repository interface and class
    package com.infosys.demo.repository;
    public interface StudentRepository {
         StudentDTO getStudent(int roll);
         }
     

   package com.infosys.demo.repository;
   @Repository 
   public class StudentRepositoryImpl implements StudentRepository {
 
     @PersistenceContext
     private EntityManager em;   


     public StudentDTO getStudent(int roll){
                        StudentDTO studentDTO=null;
                        Student student=em.find(Student.class,roll);
                        if(student!=null){
                          studentDTO=new StudentDTO();
                          studentDTO.setRoll(student.getRoll());
                          studentDTO.setName(student.getName());
                          studentDTO.setMarks(Student.getMarks());
                        }   
              return StudentDTO;  
         }

}
   


10) Complete the class with main method:

  
  @SpringBootApplication
   public class ReadApplication implements CommandLineRunner{

    @Autowired
    private StudentService studentService;

    public static void main(String args[]){
     SpringApplication.run(ReadApplication.class,args);   
 
    }
 
    public void run(String ... args){
         
         readStudent();

       
    }

public void readStudent(){
       try{
              int roll=1;
        StudentDTO studentDTO=getStudent(roll);
              System.out.println(studentDTO); 
       
        }catch(RecordNotFoundException ex){
          LOGGER.error(ex.getMessage());
       }
 
    }

------------------------------------------------------------------------------------------------------------
application.properties
Service.isRollFound=Roll number not found 
# MySQL settings
#Change these settings according to database you are using
spring.datasource.url=jdbc:mysql://localhost:3306/customer_db
spring.datasource.username=root

#If MySQL installation is password proctored,then use below property to set password
spring.datasource.password=password@123

#JPA settings
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
--------------------------------------------------------------------------------------------------------------
For The adding/inserting records we need to check whether the record is already present or not.
Whether the record is present or not , we check it in the Service layer and from there only we throw the 
user defined exception. 
----------------------------------------------------------------------------------------------------------

